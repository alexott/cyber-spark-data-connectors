# TODO: add Azure stuff as optional dependencies
# https://stackoverflow.com/questions/60971502/python-poetry-how-to-install-optional-dependencies
[tool.poetry]
name = "cyber-spark-data-connectors"
version = "0.0.3"
description = "Cybersecurity-related custom data connectors for Spark (readers and writers)."
authors = ["Alex Ott <alexott@gmail.com>"]
packages = [
    {include = "cyber_connectors"}
]

[tool.poetry.dependencies]
python = ">=3.9,<=3.12"
requests = "^2.32.3"
azure-monitor-ingestion = "^1.0.4"
azure-identity = "^1.20.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.4"
pytest-cov = "^6.0.0"
pytest-spark = "^0.6.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.9.7"
pyspark = {extras = ["sql"], version = "4.0.0.dev2"}
grpcio = ">=1.48,<1.57"
grpcio-status = ">=1.48,<1.57"
googleapis-common-protos = "^1.56.4"
#delta-spark = "^3.2.1"
chispa = "^0.10.1"
mypy = "^1.15.0"
types-requests = "^2.32.0.20241016"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "notebooks",
    "tests",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "N",  # PEP8 naming convetions
    "D"  # pydocstyle
]
ignore = [
"D103",  # No docstring in public function
"N812",  # Lowercase `functions` imported as non-lowercase `F`
"F405",  # `assert_df_equality` may be undefined, or defined from star imports
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
